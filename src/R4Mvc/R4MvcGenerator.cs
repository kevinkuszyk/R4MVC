namespace R4Mvc
{
	using System.IO;
	using System.Linq;

	using Microsoft.CodeAnalysis.CSharp;
	using Microsoft.CodeAnalysis.CSharp.Syntax;

	public static class R4MvcGenerator
	{

		private const string _headerText = @"
// <auto-generated />
// This file was generated by a R4Mvc.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the r4mvc.json file (i.e. the settings file), save it and rebuild.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress ""Foo hides inherited member Foo.Use the new keyword if hiding was intended."" when a controller and its abstract parent are both processed";

		public static bool Generate(CSharpCompilation compiler, ClassDeclarationSyntax[] mvcControllerNodes)
		{
			// Create R4Mvc generated file with target project namespace
			var firstNode = mvcControllerNodes.First();
			var firstModel = compiler.GetSemanticModel(firstNode.SyntaxTree);
			var firstSymbol = firstModel.GetDeclaredSymbol(firstNode);

			var generatedFilePath = GetGeneratedFilePath(Path.GetDirectoryName(firstNode.SyntaxTree.FilePath));

			var fileTree = R4MvcHelpers.CreateNamespace(firstSymbol.ContainingNamespace.ToString());
			fileTree = fileTree.WithHeader(_headerText);
			fileTree = fileTree.WithPragmaCodes(false, 1591, 3008, 3009, 0108);
			fileTree = fileTree.WithUsings("System.CodeDom.Compiler");
			fileTree.SyntaxTree.WithFilePath(generatedFilePath);

			foreach (var mvcControllerNode in mvcControllerNodes)
			{
				var model = compiler.GetSemanticModel(mvcControllerNode.SyntaxTree);
				var mvcSymbol = model.GetDeclaredSymbol(mvcControllerNode);

				// create partial class
				fileTree = fileTree.WithClass(mvcSymbol.Name, mvcControllerNode.TypeParameterList?.Parameters.ToArray());

				// TODO figure out nice method to fluently add attributes and subclasses
				// TODO create ActionNames sub class
				// TODO create ActionConstants sub class

				// TODO create T4MVC_[Controller] class inheriting from partial
			}

			// TODO create static MVC class
			// TODO create static Links class (scripts, content, bundles?)
			// TODO create R4MVCHelpers class

			fileTree = fileTree.WithPragmaCodes(false, 1591, 3008, 3009, 0108);
			fileTree.WriteFile(generatedFilePath);
			return true;
		}
		
		private static string GetGeneratedFilePath(string controllerPath)
		{
			var path = Path.Combine(controllerPath, "R4MVC");
			if (controllerPath != null && !Directory.Exists(path))
			{
				Directory.CreateDirectory(path);
			}

			return Path.Combine(path, R4MvcHelpers.R4MvcFileName);
		}
	}
}